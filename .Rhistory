df.plt <- df.plt %>% left_join( select(mon.TDF, c("date", "ALLCANotNL", "AllFR")), by='date')
df.plt["TDF"] <- df.plt$ALLCANotNL + df.plt$AllFR
df.plt <- df.plt  %>% left_join(select(IATA, c("date", "ALLCANotNL", "AllFR")), by='date')
df.plt["IATA"] <- df.plt$AllFR.y + df.plt$ALLCANotNL.y
df.plt <- df.plt %>% left_join(Final_data, by= 'date')
colnames(df.plt)
df.plt <- select(df.plt , c("date", "FC", "TDF", "IATA" , "estimated"))
# remove Jan and Feb 2019
df.plt <- subset(df.plt, !date %in% c(as.Date("2019-01-01"), as.Date("2019-02-01")) )
cuts <- data.frame(Ref = c("1", "2", "3", "4", "5", "6","7","8","9"),
vals = c(as.Date("2020-03-13"), as.Date("2020-05-04"),as.Date("2020-06-09"),
as.Date("2020-07-03"), as.Date("2020-08-31"), as.Date("2020-10-20"),
as.Date("2020-11-25"),as.Date("2021-02-01"),
as.Date("2021-03-27")), stringsAsFactors = FALSE)
cut3 <- data.frame(Ref = c("81.6% decrease"),
vals = c(as.Date("2021-01-28")),
stringsAsFactors = FALSE)
colLeg <- c("IATA" = cpalete[4], "TDF" = cpalete[5],
"FC" = cpalete[3], "Estimated"= cpalete[6])
p6 <- ggplot() +
geom_line(data=df.plt, aes(x=date, y= estimated, col="Estimated"), lty=1, size=1)+
geom_line(data=df.plt, aes(x=date, y= IATA, col="IATA"), lty=1, size=0.7)+
geom_line(data=df.plt, aes(x=date, y= TDF, col="TDF"), lty=1, size=0.7)+
geom_line(data=df.plt, aes(x=date, y= FC, col="FC"), linetype="dashed", lty=2, size=0.7)+
annotate("rect", xmin = as.Date("2020-03-01"), xmax =as.Date("2020-09-01"), ymin = 0,
ymax = 210000, alpha = .1)+
geom_vline(mapping = aes(xintercept = vals), linetype="dashed", data = cuts,
show.legend = FALSE, size=0.3) +
geom_text(mapping = aes(x = vals, y = 200000, label = Ref, hjust = 1.2, vjust = -.5),
data = cuts, size=3, fontface="bold") +
geom_text(mapping = aes(x = vals, y = 30000, label = Ref, hjust = .13, vjust =  0.1, angle = 0),
data = cut3, size=rel(3.2), color= cpalete[6], fontface="bold")  +
scale_x_date(date_breaks = "1 month", date_labels = "%b %y") +
theme_light() + labs(color=" ", title="Travel volume", y="\n Arriving travellers (monthly)", x="") +
scale_color_manual(values = colLeg) +
theme_classic() + theme(axis.text.x = element_text(angle = 90, size=rel(1.2)),
legend.title = element_blank(),
legend.position="bottom",
legend.text=element_text(size=rel(1.2)),
plot.title=element_text(size=rel(1.3), face="bold"),
axis.title = element_text(size=rel(1.1)),
axis.text.y = element_text(size=rel(1.2)))
p6
## March2019-Feb2020 (not June-july-August since during pandemic we dont have thoes)
reduct.fc()
## March2019-Feb2020 (not June-july-August since during pandemic we dont have thoes)
xx <- Final_data
xx <- subset(xx, !date %in% c(as.Date("2019-01-01"), as.Date("2019-02-01"), as.Date("2020-03-01"),
as.Date("2019-06-01"), as.Date("2019-07-01"), as.Date("2019-08-01")) )
rownames(xx) <- NULL  # Reset row names
#9 months
#2019-2020 (before pan)
tot20 <- sum(xx[1:9, 'estimated'], na.rm = TRUE)  #Int, CA, or estimated
#2020-2021 (pan)
tot21 <- sum(xx[10:18, 'estimated'], na.rm = TRUE)  #Int, CA, or estimated
##percentage decrease
decrease <- tot20 - tot21
(decrease/tot20)*100
##81.5865
##sep to Feb (5 month)
mean20 <- mean(Final_data$estimated[9:14])
mean21 <- mean(Final_data$estimated[16:21])
##percentage decrease mean
decmean <- mean20 - mean21
(decmean/mean20)*100
## 81.67392
## March2019-Feb2020 (not June-july-August since during pandemic we dont have thoes)
reduct <- function(Final_data){
df <- Final_data
df <- subset(df, !date %in% c(as.Date("2019-01-01"), as.Date("2019-02-01"), as.Date("2020-03-01"),
as.Date("2019-06-01"), as.Date("2019-07-01"), as.Date("2019-08-01")) )
rownames(df) <- NULL  # Reset row names
tot20 <- sum(df[1:9, 'estimated'], na.rm = TRUE)  #2019-2020 (before pan)
tot21 <- sum(xx[10:18, 'estimated'], na.rm = TRUE)   #2020-2021 (pan)
##percentage decrease
decrease <- tot20 - tot21
prdecrease <- (decrease/tot20)*100
return(prdecrease)
}
reduct(Final_data)
per12  <- read.csv("Data/TraVolData/percentage(h).csv")
per12$date <- as.Date(as.character(per12$date), format = "%Y-%m-%d")
CRFinal <- per12 %>% left_join(Final_data, by= 'date')
#make volume for origin/month
for (i in 1:nrow(CRFinal)){
for (j in 2:11){
CRFinal[i,j] <- (CRFinal[i,j]*CRFinal$CA[i])/100
}
for (j in 12:13){
CRFinal[i,j] <- (CRFinal[i,j]*CRFinal$Int[i])/100
}
}
#percentage Int and CA close to estimated
CRPer <- CRFinal
for (i in 1:nrow(CRPer)){
for (j in 2:length(CRPer)){
CRPer[i,j] <- (CRPer[i,j]*100)/(CRPer$estimated[i])
}
}
View(CRPer)
View(CRFinal)
per12  <- read.csv("Data/TraVolData/percentage(h).csv")
per12$date <- as.Date(as.character(per12$date), format = "%Y-%m-%d")
ProFinal <- per12 %>% left_join(Final_data, by= 'date')
#make volume for origin/month
for (i in 1:nrow(ProFinal)){
for (j in 2:11){
ProFinal[i,j] <- (ProFinal[i,j]*ProFinal$CA[i])/100
}
for (j in 12:13){
ProFinal[i,j] <- (ProFinal[i,j]*ProFinal$Int[i])/100
}
}
#percentage Int and CA close to estimated
CRPer <- ProFinal
for (i in 1:nrow(CRPer)){
for (j in 2:length(CRPer)){
CRPer[i,j] <- (CRPer[i,j]*100)/(CRPer$estimated[i])
}
}
View(ProFinal)
View(CRFinal)
View(CRPer)
#delete Jan and Feb 2019 from IATA
plt.df <- select(CRPer, -c("Int", "CA", "estimated"))
plt.df <- subset(plt.df, !date %in% c(as.Date("2019-01-01"), as.Date("2019-02-01")) )
View(plt.df)
plt.df <- melt(plt.df, id=c("date"))
mycolors = viridis(12)
colormap <- c("US" = mycolors[12], "nonUS" = mycolors[11], "ON" = mycolors[10],
"NS" = mycolors[9], "AB" = mycolors[8], "BC" = mycolors[7],
"QC" = mycolors[6], "NB" = mycolors[5], "MB" = mycolors[4],
"SK" = mycolors[3], "PEI"= mycolors[2], "TR" = mycolors[1]
)
cut1 <- data.frame(Ref = c("Public Health Emergency in NL"),
vals = c(as.Date("2020-03-20")),
stringsAsFactors = FALSE)
cut2 <- data.frame(Ref = c( "Travel declaration data begins"),
vals = c(as.Date("2020-08-15")),
stringsAsFactors = FALSE)
p7 <- ggplot() +
geom_bar(data=plt.df , aes(x=date, y=value, fill=variable),stat="identity") +
scale_x_date(date_breaks = "1 month", date_labels = "%b %y") +
geom_vline(mapping = aes(xintercept = vals), linetype="dashed", data = cut1,
show.legend = FALSE, size=0.3) +
geom_vline(mapping = aes(xintercept = vals), linetype="dashed", data = cut2,
show.legend = FALSE, size=0.3) +
labs(color=" ",
title="Percentage of travellers arriving from different origins",
y="\n ",
x="") +
scale_fill_manual(values = colormap) +
guides(fill = guide_legend(title = "Departure Origin"), size= rel(1.4))+
geom_text(mapping = aes(x = vals, y = 100, label = Ref, hjust = 1.2, vjust =  1.5, angle = 90),
data = cut1, size=rel(3.1))  +
geom_text(mapping = aes(x = vals, y = 100, label = Ref, hjust = 1.2, vjust = - 0.5, angle = 90),
data = cut2, size=rel(3.1))  +
theme_classic() + theme(axis.text.x = element_text(angle = 90, size=rel(1.2)),
legend.position="bottom" ,
legend.text=element_text(size=rel(1.2)),
plot.title=element_text(size=rel(1.3), face="bold"),
axis.title = element_text(size=rel(1.1)),
axis.text.y = element_text(size=rel(1.2))) +
scale_y_continuous(labels = function(x) paste0(x*1, "%"))
p7
AA <- CRPer
# get the average months March 2019 to Feb 2020 (except June July August 2019) IATA (before Pandemic)
AA <- subset(AA, !date %in% c(as.Date("2019-01-01"), as.Date("2019-02-01"), as.Date("2020-03-01"), as.Date("2019-06-01"), as.Date("2019-07-01"), as.Date("2019-07-01"), as.Date("2019-08-01")) )
# Reset row names
rownames(AA) <- NULL
#prepan
AA1 <- AA[1:9,]
#pan
AA2 <- AA[10:18,]
# get the mean for both dataframe
A1 <- colMeans(AA1[2:13])
A2 <- colMeans(AA2[2:13])
A1 <- data.frame(A1)
A1 <- cbind(province = rownames(A1), A1)
rownames(A1) <- 1:nrow(A1)
#test sum(A1$A1)=100
#repeat TR for three tritories
A1[nrow(A1) + 1,] <- c( "YT",  0.338555269656022)
A1[nrow(A1) + 1,] <- c( "NT", 0.338555269656022)
A1[nrow(A1) + 1,] <- c( "NU",0.338555269656022)
A1$A1 <- as.numeric(A1$A1)
A1 <- A1 %>% rename(Percentage = A1)
A1$province[A1$province == 'PEI'] <- 'PE'
A2 <- data.frame(A2)
A2 <- cbind(province = rownames(A2), A2)
rownames(A2) <- 1:nrow(A2)
#repeat TR for three tritories
A2[nrow(A2) + 1,] <- c( "YT", 3.62752706114931)
A2[nrow(A2) + 1,] <- c( "NT", 3.62752706114931)
A2[nrow(A2) + 1,] <- c( "NU", 3.62752706114931)
A2$A2 <- as.numeric(A2$A2)
A2 <- A2 %>% rename(Percentage = A2)
A2$province[A2$province == 'PEI'] <- 'PE'
## canada map
pr_geographic <- mapcan(boundaries = province, type = standard)
pr_geographic <- inner_join(pr_geographic, A1, by = c("pr_alpha" = "province"))
m1 <- pr_geographic %>%
ggplot(aes(x = long, y = lat, group = group, fill = Percentage)) +
geom_polygon(alpha= 1, show.legend = NA) +
annotate(geom = "text", x = 642412.6, y = 201110.2, label = "27%", color = "white", size = 3)+
annotate(geom = "text", x = 1349519.2, y = 782762.2,label = "14%", color = "white", size = 3)+
annotate(geom = "text", x = -115306.8, y = 644233.4,label = "0.7%",color = "white", size = 3)+
annotate(geom = "text", x = 2163606.1, y = 237946.6, label = "3%", color = "white", size = 3)+
annotate(geom = "text", x = -1092152.6,y = 809288.2, label = "7%", color = "white", size = 3)+
annotate(geom = "text", x = -1867594.7,y =912726.5, label = "2.5%",color = "white", size = 3)+
annotate(geom = "text", x = -675361.6, y = 487741.4,label = "0.5%",color = "white", size = 3)+
annotate(geom = "text", x = -888417.3, y = 1651194.8,label = "0.3%",color ="white", size = 3)+
annotate(geom = "text", x = 2413606.1, y = 421394.6,label = "0.6%",color ="black", size = 3)+
annotate(geom = "text", x = 2695757.5, y = 232727.5,label = "22%", color = "black", size = 3)+
annotate(geom = "text", x = 1565757, y = -750409 , label = "US 14% & Others 8%",
fontface = "italic", color = "black", size = 3) +
coord_fixed() +
theme_mapcan() +
scale_fill_continuous(type = "viridis",
limits = c(0,30), breaks = c(0, 5, 10, 15, 20, 25,30),
guide = guide_colourbar(nbin = 100, draw.ulim = FALSE, draw.llim = FALSE,barwidth = 20,
title = "Travel volume (%)")
)+
theme_mapcan() + theme(legend.position="bottom",
plot.title=element_text(size=rel(1.3), face="bold"))+
ggtitle("Before the pandemic")
pr_geographic2 <- mapcan(boundaries = province, type = standard)
pr_geographic2 <- inner_join(pr_geographic2, A2, by = c("pr_alpha" = "province"))
m2 <- pr_geographic2 %>%
ggplot(aes(x = long, y = lat, group = group, fill = Percentage)) +
geom_polygon(show.legend = NA) +
annotate(geom = "text",x = 642412.6,y = 201110.2, label = "21%", color = "white",size = 3)+
annotate(geom = "text",x = 1349519.2,y = 782762.2, label = "4.7%",color = "white",size = 3)+
annotate(geom = "text",x = -115306.8,y = 644233.4, label = "1%", color = "white",size = 3)+
annotate(geom = "text",x = 2163606.1,y = 237946.6, label = "3%", color = "white", size = 3)+
annotate(geom = "text",x = -1092152.6,y = 809288.2, label = "16%", color = "white",size = 3)+
annotate(geom = "text",x = -1867594.7,y =912726.5, label = "5.2%", color = "white",size = 3)+
annotate(geom = "text",x = -675361.6,y = 487741.4, label = "0.7%", color = "white",size = 3)+
annotate(geom = "text",x = -888417.3,y = 1651194.8 , label = "3.6%", color ="white",size = 3)+
annotate(geom = "text", x = 2413606.1, y = 421394.6,label = "0.7%",color ="black", size = 3)+
annotate(geom = "text",x = 2695757.5,y = 232727.5, label = "19%", color = "black", size = 3)+
annotate(geom = "text", x = 1565757, y = -750409 , label = "US 9% & Others 15%",
fontface = "italic", color = "black", size = 3) +
coord_fixed() +
scale_fill_continuous( type = "viridis",
limits = c(0,30), breaks = c(0, 5, 10, 15, 20, 25,30),
guide = guide_colourbar(nbin = 100, draw.ulim = FALSE, draw.llim = FALSE,
title = "Travel volume (%)")
) +
theme_mapcan() + theme(legend.position="",
plot.title=element_text(size=rel(1.3), face="bold"))+
ggtitle("During the pandemic")
m1 + m2
View(AA1)
View(A1)
A1$Percentage
View(A1)
A2$Percentage
View(ProFinal)
CC <- ProFinal
# get the average months March 2019 to Feb 2020 (except June July August 2019) IATA (before Pandemic)
CC <- subset(CC, !date %in% c(as.Date("2019-01-01"), as.Date("2019-02-01"), as.Date("2020-03-01"), as.Date("2019-06-01"), as.Date("2019-07-01"), as.Date("2019-07-01"), as.Date("2019-08-01")) )
# Reset row names
rownames(CC) <- NULL
#prepan
CC1 <- CC[1:9,]
#pan
CC2 <- CC[10:18,]
# get the mean for both dataframe
C1 <- colSums(CC1[2:13])
C2 <- colSums(CC2[2:13])
C1 <- data.frame(C1)
C1 <- cbind(province = rownames(C1), C1)
rownames(C1) <- 1:nrow(C1)
#repeat TR for three tritories
C1[nrow(C1) + 1,] <- c( "YT",  2682.378)
C1[nrow(C1) + 1,] <- c( "NT", 2682.378)
C1[nrow(C1) + 1,] <- c( "NU",2682.378)
C1$C1 <- as.numeric(C1$C1)
C1 <- C1 %>% rename(Daily = C1)
C1$province[C1$province == 'PEI'] <- 'PE'
# 273 days pre pandemic 2019
C1$Daily <- (C1$Daily)/273
C1$Daily <- ceiling(C1$Daily)
C2 <- data.frame(C2)
C2 <- cbind(province = rownames(C2), C2)
rownames(C2) <- 1:nrow(C2)
#repeat TR for three tritories
C2[nrow(C2) + 1,] <- c( "YT", 5329)
C2[nrow(C2) + 1,] <- c( "NT", 5329)
C2[nrow(C2) + 1,] <- c( "NU", 5329)
C2$C2 <- as.numeric(C2$C2)
C2 <- C2 %>% rename(Daily = C2)
C2$province[C2$province == 'PEI'] <- 'PE'
## 274 days during the pandemic 2020
C2$Daily <- (C2$Daily)/274
C2$Daily <- ceiling(C2$Daily)
pr_geographic <- mapcan(boundaries = province, type = standard)
pr_geographic <- inner_join(pr_geographic, C1, by = c("pr_alpha" = "province"))
df.label <- read.csv("Data/df.label2.csv")
df.label <- df.label %>% left_join(C1 , by= "province")
df.label$Daily <- round(df.label$Daily)
m3 <- pr_geographic %>%
ggplot(aes(x = long, y = lat, group = group, fill = Daily)) +
geom_polygon(show.legend = NA) +
geom_text(data =df.label, aes(x = new.long, y = new.lat, group = 1, label = Daily),
size = 4, color = "white")+
annotate(geom = "text",x = 2685757.5,y = 232727.5,label = "648", color = "black", size = 4)+
annotate(geom = "text", x = 2413606.1, y = 421394.6,label = "19",color ="black", size = 4)+
annotate(geom = "text", x = 1565757, y = -750409 , label = "US 479 & Others 300",
fontface = "italic", color = "black", size = 4) +
coord_fixed() +
theme_mapcan() +
scale_fill_continuous(type = "viridis",
limits = c(0,900), breaks = c(25,50,75, 100, 200, 300, 400, 500,600, 700,800,900),
#limits = c(0,900), breaks = c(25,50,75,100,250,500,750,900),
guide = guide_colourbar(nbin = 13, draw.ulim = FALSE, draw.llim = FALSE, barwidth = 20,
title = "Total travel volume (Daily)", label.hjust = 0.7,
label.vjust = 0.79,
label.theme = element_text(angle = 90, size=7.9))
) +
theme_mapcan() + theme(legend.position="bottom",
plot.title=element_text(size=rel(1.3), face="bold"))+
ggtitle("Before the pandemic")
pr_geographic2 <- mapcan(boundaries = province, type = standard)
pr_geographic2 <- inner_join(pr_geographic2, C2, by = c("pr_alpha" = "province"))
#C2["diff"] <- C1$Daily - C2$Daily
df.label <- read.csv("Data/df.label2.csv")
df.label <- df.label %>% left_join(C2 , by= "province")
#df.label$diff <- round(df.label$diff)
# delete Daily and rename
#df.label <- select(df.label, c("province", "new.lat", "new.long", "diff" ))
#df.label$diff <- -(df.label$diff)
#df.label <- df.label %>% rename(  Daily = diff)
m4 <- pr_geographic2 %>%
ggplot(aes(x = long, y = lat, group = group, fill = Daily)) +
geom_polygon(show.legend = NA) +
geom_text(data =df.label, aes(x = new.long, y = new.lat, group = 1, label = Daily),
size = 4, color = "white")+
annotate(geom = "text", x = 2715757.5,y = 232727.5,label = "115", color = "black", size = 4)+
annotate(geom = "text", x = 2413606.1, y = 421394.6,label = "5",color ="black", size = 4)+
annotate(geom = "text", x = 1565757, y = -750409 , label = "US 54 & Others 85",
fontface = "italic", color = "black", size = 4) +
coord_fixed() +
scale_fill_continuous( type = "viridis",
limits = c(0,900), breaks = c(25,50,75,100,250,500,750,900),
guide = guide_colourbar(nbin = 10, draw.ulim = FALSE, draw.llim = FALSE, barwidth = 15,
title = "Travel volume (Daily)",
label.theme = element_text(angle = 90, size=7.8))
) +
theme_mapcan() + theme(legend.position="",
plot.title=element_text(size=rel(1.3), face="bold"))+
ggtitle("During the pandemic")
m3 + m4
#ggsave("Figure/map2.png", width = 12, , height = 8)
C1$Daily
C2$Daily
(p6+p5)/(m3+m4 ) + plot_layout(heights = unit(c(6.5, 1 ), c('cm', 'null'))) + plot_annotation(tag_levels = 'A')
ggsave("Figure/Figure1.png", width = 14, , height = 12, dpi= 500)
(p7)/(m1+m2 ) + plot_layout(heights = unit(c(5.8, 1 ), c('cm', 'null'))) + plot_annotation(tag_levels = 'A')
ggsave("Figure/Figure2.png", width = 9, , height = 10, dpi= 500)
(p1 + p2 ) + plot_annotation(tag_levels = 'A')
ggsave("Figure/FigureApp2.png", width = 10, , height = 6, dpi =500)
(p3 + p4) + plot_annotation(tag_levels = 'A')
ggsave("Figure/diffsource.png", width = 10, , height = 6, dpi =1200)
total.pand <- function(TDF, FC, FCEXCrew){
df <- FC %>% filter(FC$date > as.Date("2020-02-01") )
colnames(df)[colnames(df) == "total"] <- "FC"
##add FCEXCrew
df <- df %>% left_join( FCEXCrew, by='date')
colnames(df)[colnames(df) == "total"] <- "FC_Excrew"
df["crew_Int"] <- df$FC - df$FC_Excrew
df2 <- select(mon.TDF, c("date" , "ALLCANotNL", "AllFR" )) %>%
rename( TDF_CA = ALLCANotNL , TDF_Int = AllFR)
df <- df2 %>% left_join( df, by='date')
#Exempt from International,  compare (FCInt) vs NLCHI_Int (should include FCNonRes!)
df["Exp_Int"] <-  df$FC_Excrew -  df$TDF_Int
#Exempt from CA
df["crew_CA"] <- 2.5*df$crew_Int  #crew from CA
df["Exp_CA"] <- 2.4*df$Exp_Int    #excluded crew
# update CA
df["CA"] <- df$TDF_CA + df$Exp_CA + df$crew_CA
df["Int"] <- df$FC
df["CA"] <- round(df$CA)
#df <- select(df, c("date" ,"CA", "Int"))
return(df)
}
TRV.Pan <- total.pand(TDF, FC, FCEXCrew)
View(TRV.Pan)
TRV.Pan <- select(TRV.Pan, c("date" ,"CA", "Int"))
Daily1 <- total.pand(TDF, FC, FCEXCrew)
View(Daily1)
Daily1 <- select(Daily1, c("date", "TDF_CA", "TDF_Int", "FC", "crew_CA", "Exp_CA" ))
#Take exemption of TDF for INT and CA
Daily1["exclINT"] <- Daily1$FC - Daily1$TDF_Int
Daily1["exclCA"] <- Daily1$crew_CA + Daily1$Exp_CA
View(per12)
perCAPan <- per12 %>% filter(per12$date >= as.Date("2020-09-01"))
perCAPan <- select(perCAPan, -c(nonUS, US))
View(perCAPan)
## divided exemption Canada based perCAPan between provinces per month
Dailypro <- perCAPan
for (i in 1:nrow(Dailypro)){
for (j in 2:length(Dailypro)){
Dailypro[i,j] <- (Daily1$exclCA[i])*(perCAPan[i,j]/100)
}
}
View(Dailypro)
## make a dataframe of exemption Travel volume (who did not fill TDF form) for province and INT
Dailypro <- Dailypro %>% left_join(select(Daily1, c(date, exclINT)), by ="date")
# make data exemption daily 273
Dailypro["Ym"] <- format(as.Date(Dailypro$date), "%Y-%m")
Daily2 <- Dailypro %>% select(date) %>%
complete(date=  seq.Date(min(date), max(date)+30, by="day"),) %>%
mutate(Ym=paste(year(date),str_pad(month(date), 2, pad = "0"),sep = "-"))
Daily2 <- Daily2 %>% left_join(Dailypro, by="Ym")
# divide number for days in a month
v_daily <- function(yr_month, v_monthly) {
# Convert current month to current date
curr_date <- ymd(paste0(yr_month, "-1"))
# Calculate number of days in the month
n_days <- days_in_month(curr_date)
# Calculate daily rate
(v_monthly) / (n_days)
}
Daily2 <- Daily2 %>%
mutate(ON = map2_dbl(Ym, ON, v_daily), QC = map2_dbl(Ym, QC, v_daily),
MB = map2_dbl(Ym, MB, v_daily), NB = map2_dbl(Ym, NB, v_daily),
AB = map2_dbl(Ym, AB, v_daily), NS = map2_dbl(Ym, NS, v_daily),
BC = map2_dbl(Ym, BC, v_daily), SK = map2_dbl(Ym, SK, v_daily),
PEI = map2_dbl(Ym, PEI, v_daily), TR = map2_dbl(Ym, TR, v_daily),
exclINT = map2_dbl(Ym, exclINT, v_daily)
)
#keep the interested columns
Daily2 <- select(Daily2, -c("date.y", "Ym")) %>% rename(date = date.x)
Daily2 <- Daily2 %>% rename(INT= exclINT)
View(Daily2)
View(TDF)
colnames(TDF)
# add exluded daily to TDF daily
Tra_daily2 <- select(TDF , -c("US", "nonUS", "ALLCANotNL")) %>% rename(INT = AllFR )
View(Tra_daily2)
origin <- c("ON","QC","MB", "NB", "AB", "NS", "BC", "SK", "PEI", "TR","INT")
for (i in 1:length(origin)){
pr <- origin[i]
for (j in 1:nrow(Tra_daily2)){
Tra_daily2[j, pr] <- TDF[j, pr] + Daily2[j,pr]
}
}
origin <- c("ON","QC","MB", "NB", "AB", "NS", "BC", "SK", "PEI", "TR","INT")
for (i in 1:length(origin)){
pr <- origin[i]
for (j in 1:nrow(Tra_daily2)){
Tra_daily2[j, pr] <- Tra_daily2[j, pr] + Daily2[j,pr]
}
}
Daily1 <- total.pand(TDF, FC, FCEXCrew)
Daily1 <- select(Daily1, c("date", "TDF_CA", "TDF_Int", "FC", "crew_CA", "Exp_CA" ))
#Take exemption of TDF for INT and CA
Daily1["exclINT"] <- Daily1$FC - Daily1$TDF_Int
Daily1["exclCA"] <- Daily1$crew_CA + Daily1$Exp_CA
perCAPan <- per12 %>% filter(per12$date >= as.Date("2020-09-01"))
perCAPan <- select(perCAPan, -c(nonUS, US))
## divided exemption Canada based perCAPan between provinces per month
Dailypro <- perCAPan
for (i in 1:nrow(Dailypro)){
for (j in 2:length(Dailypro)){
Dailypro[i,j] <- (Daily1$exclCA[i])*(perCAPan[i,j]/100)
}
}
## make a dataframe of exemption Travel volume (who did not fill TDF form) for province and INT
Dailypro <- Dailypro %>% left_join(select(Daily1, c(date, exclINT)), by ="date")
# make data exemption daily 273
Dailypro["Ym"] <- format(as.Date(Dailypro$date), "%Y-%m")
# make data exemption daily 273
Dailypro["Ym"] <- format(as.Date(Dailypro$date), "%Y-%m")
Daily2 <- Dailypro %>% select(date) %>%
complete(date=  seq.Date(min(date), max(date)+30, by="day"),) %>%
mutate(Ym=paste(year(date),str_pad(month(date), 2, pad = "0"),sep = "-"))
Daily2 <- Daily2 %>% left_join(Dailypro, by="Ym")
# divide number for days in a month
v_daily <- function(yr_month, v_monthly) {
# Convert current month to current date
curr_date <- ymd(paste0(yr_month, "-1"))
# Calculate number of days in the month
n_days <- days_in_month(curr_date)
# Calculate daily rate
(v_monthly) / (n_days)
}
Daily2 <- Daily2 %>%
mutate(ON = map2_dbl(Ym, ON, v_daily), QC = map2_dbl(Ym, QC, v_daily),
MB = map2_dbl(Ym, MB, v_daily), NB = map2_dbl(Ym, NB, v_daily),
AB = map2_dbl(Ym, AB, v_daily), NS = map2_dbl(Ym, NS, v_daily),
BC = map2_dbl(Ym, BC, v_daily), SK = map2_dbl(Ym, SK, v_daily),
PEI = map2_dbl(Ym, PEI, v_daily), TR = map2_dbl(Ym, TR, v_daily),
exclINT = map2_dbl(Ym, exclINT, v_daily)
)
#keep the interested columns
Daily2 <- select(Daily2, -c("date.y", "Ym")) %>% rename(date = date.x)
Daily2 <- Daily2 %>% rename(INT= exclINT)
## add daily exemption into raw TDF data source
TDF <- select(TDF , -c("US", "nonUS", "ALLCANotNL")) %>% rename(INT = AllFR )
Tra_daily2 <- TDF
origin <- c("ON","QC","MB", "NB", "AB", "NS", "BC", "SK", "PEI", "TR","INT")
for (i in 1:length(origin)){
pr <- origin[i]
for (j in 1:nrow(Tra_daily2)){
Tra_daily2[j, pr] <- TDF[j, pr] + Daily2[j,pr]
}
}
# round data
Tra_daily2 <- data.frame(lapply(Tra_daily2, function(x) if(is.numeric(x)) floor(x) else x))
